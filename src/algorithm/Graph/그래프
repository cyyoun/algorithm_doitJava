1. 그래프의 표현

노드 : 중점
에지 : 간선

    1) 에지 리스트 👉 에지 중심
        (1) 가중치 없는 그래프 : 2차원 배열에 출발, 도착 노드를 저장하여 표현
            int[][] A = new int[2][n];
            A[출발 노드][도착 노드]

        (2) 가중치 있는 그래프 : 2차원 배열에 출발, 도착, 가중치 노드를 저장하여 표현
            int[][] A = new int[3][n];
            A[출발 노드][도착 노드][가중치 노드]

        ✔ 벨만 포드나 크루스칼 알고리즘에 사용
        ✔ 구현하기는 쉬우나 특정 에지 탐색이 어려움


    2) 인접 행렬 👉 노드 중심
        (1)가중치 없는 그래프 (있는 그래프도 동일함) : 노드가 n 개인 경우 n행 n열인 2차원 배열 생성하여 표현
            int[][] A = new int[n 출발][n 도착];
            1에서 2로 향하는 에지가 있다면 A[1][2] = 1 과 같이 저장

         ✔ 구현은 쉬우며 에지의 여부와 가중치 값을 직접 접근 가능
         ✔ n번 접근해야 하므로 효율성 떨어짐
         ✔ 노드가 3만 개가 넘으면 자바 힙 스페이스 에러 발생

    3) 인접 리스트
    위에 두 개는 배열로 나타낸 그래프라면, 인접 리스트는 ArrayList 로 표현함
        (1) 가중치 없는 그래프
            ArrayList<Integer>[] A = new ArrayList<>[n];
            ArrayList[1] = [2, 3]
            1과 연결된 노드 2, 3

        (2) 가중치 있는 그래프
            ArrayList<Integer>[] A = new ArrayList<>[n];
            ArrayList[1] = [(2, 8), (3, 3)] (노드, 가중치)
            1과 연결된 노드 2가 가중치 8에지로, 3은 가중치 3에지로 연결

        ✔ 에지 탐색 시간이 매우 뛰어남
        ✔ 노드 개수가 커도 공간 효율 좋아 메모리 초과 에러 발생 안함
        ✔ 구현이 복잡함
        ❗ DFS, BFS 와 함께 사용됨




2. 유니온 파인드


3. 위상 정렬

4. 다익스트라

5. 벨만-포드

6. 플로이드-워셜



7. 최소 신장 트리